import datetime
import threading
import telebot
from telebot import types  # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–æ–≤


from data.lesson import Lesson
from data import db_session
from data.db_session import create_session

TOKEN = '5820061555:AAHeXJY7JZBLNDmzNMnEzKBmi4GDrLzzib0'

bot = telebot.TeleBot(token=TOKEN)

def main():
    db_session.global_init("db/schedule.db")


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üìÉ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    btn2 = types.KeyboardButton("‚è∞–ó–≤–æ–Ω–∫–∏")
    btn3 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    markup.add(btn1, btn2, btn3)
    bot.send_message(message.chat.id,
                     text="–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞".format(
                         message.from_user), reply_markup=markup)






@bot.message_handler(commands=['reminder'])
def reminder_message(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:')
    bot.register_next_step_handler(message, set_reminder_name)


@bot.message_handler(commands=['add_schedule'])
def reminder_message(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:')
    type_of_change = 'shedule'
    bot.register_next_step_handler(message, check_password, type_of_change)


@bot.message_handler(commands=['add_bells'])
def reminder_message(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:')
    type_of_change = 'bell'
    bot.register_next_step_handler(message, check_password, type_of_change)


@bot.message_handler(content_types=['text'])
def func(message):
    days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']

    if(message.text == "üìÉ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" or "–∞—Å–ø" in message.text):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–°–µ–≥–æ–¥–Ω—è")
        btn2 = types.KeyboardButton("–ó–∞–≤—Ç—Ä–∞")
        btn3 = types.KeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
        btn4 = types.KeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫")
        btn5 = types.KeyboardButton("–°—Ä–µ–¥–∞")
        btn6 = types.KeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥")
        btn7 = types.KeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞")
        btn8 = types.KeyboardButton("–°—É–±–±–æ—Ç–∞")
        back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è")
        markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8, back)
        bot.send_message(message.chat.id, text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)

    elif message.text in days:
        get_week_schedule(message)

    elif (message.text == '–°–µ–≥–æ–¥–Ω—è' or message.text == '–ó–∞–≤—Ç—Ä–∞'):
        get_today_schedule(message)

    elif message.text == '‚è∞ –ó–≤–æ–Ω–∫–∏':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–û–±—ã—á–Ω—ã–π –¥–µ–Ω—å")
        btn2 = types.KeyboardButton("–° –∫–ª–∞—Å—Å–Ω—ã–º —á–∞—Å–æ–º")
        back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è")
        markup.add(btn1, btn2, back)
        bot.send_message(message.chat.id, text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)

    elif message.text in ['–û–±—ã—á–Ω—ã–π –¥–µ–Ω—å', '–° –∫–ª–∞—Å—Å–Ω—ã–º —á–∞—Å–æ–º']:
        get_bells(message)

    elif (message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("üìÉ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        button2 = types.KeyboardButton("‚è∞ –ó–≤–æ–Ω–∫–∏")
        button3 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
        markup.add(button1, button2)
        bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)



def check_password(message, type_of_change):
    password = message.text
    if password == '710754910':
        if type_of_change == 'bell':
            bot.send_message(message.chat.id, '–ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç. –í–µ–¥–∏—Ç–µ —Ç–∏–ø –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:')
            bot.register_next_step_handler(message, set_bells)
        elif type_of_change == 'schedule':
            bot.send_message(message.chat.id, '–ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç. –í–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:')
            bot.register_next_step_handler(message, set_week_schedule)
    else:
        bot.send_message(message.chat.id, '–ü–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–Ω—ã–π')


def get_bells(message):
    if message.text == '–û–±—ã—á–Ω—ã–π –¥–µ–Ω—å':
        f = open(f'text/bells/normal.txt', 'r')
        bot.send_message(message.chat.id, f.read())
        f.close()
    elif message.text == '–° –∫–ª–∞—Å—Å–Ω—ã–º —á–∞—Å–æ–º':
        f = open(f'text/bells/dificult.txt', 'r')
        bot.send_message(message.chat.id, f.read())
        f.close()


def set_bells(message):
    try:
        user_text = message.text.split('\n')
        type = int(user_text[0])
        db_sess = create_session()
        if type == 1:
            day = 'normal'
        else:
            day = 'dificult'
        f = open(f'text/bells/{day}.txt', 'w')
        for i in range(len(user_text)):
            if i !=0:
                f.write(user_text[i])
                f.write('\n')
        f.close()

        bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ')
    except ValueError:
        bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è')

def get_today_schedule(message):
    if message.text == '–°–µ–≥–æ–¥–Ω—è':
        day = datetime.datetime.today().weekday()
        f = open(f'text/week/{day+1}.txt', 'r')
        print(day)
        bot.send_message(message.chat.id, f.read())
        f.close()
    elif message.text == '–ó–∞–≤—Ç—Ä–∞':
        day = datetime.datetime.today().weekday()
        print(datetime.datetime.today())
        f = open(f'text/week/{(day + 2)%8}.txt', 'r')
        bot.send_message(message.chat.id, f.read())
        f.close()


def get_week_schedule(message):
    days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    day = days.index(message.text) + 1
    print(day)
    f = open(f'text/week/{day}.txt', 'r')
    bot.send_message(message.chat.id, f.read())
    f.close()
    '''
    f = open('static/img/capybara.gif', 'rb')
    bot.send_document(message.chat.id, f)
    f.close()
    '''


def set_week_schedule(message):
    try:
        user_text = message.text.split('\n')
        day = int(user_text[0])
        db_sess = create_session()
        f = open(f'text/week/{day}.txt', 'w')
        for i in range(len(user_text)):
            if i !=0:
                f.write(user_text[i])
                f.write('\n')
        f.close()

        bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ')
    except ValueError:
        bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è')



def set_reminder_name(message):
    user_data = {}
    user_data[message.chat.id] = {'reminder_name': message.text}
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î —á—á:–º–º:—Å—Å.')
    bot.register_next_step_handler(message, reminder_set, user_data)




def reminder_set(message, user_data):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç datetime
        reminder_time = datetime.datetime.strptime(message.text, '%Y-%m-%d %H:%M:%S')
        now = datetime.datetime.now()
        delta = reminder_time - now
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–∏, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if delta.total_seconds() <= 0:
            bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        else:
            reminder_name = user_data[message.chat.id]['reminder_name']
            bot.send_message(message.chat.id, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ "{}" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {}.'.format(reminder_name, reminder_time))
            reminder_timer = threading.Timer(delta.total_seconds(), send_reminder, [message.chat.id, reminder_name])
            reminder_timer.start()
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    except ValueError:
        bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')



# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def send_reminder(chat_id, reminder_name):
    bot.send_message(chat_id, '–í—Ä–µ–º—è –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ "{}"!'.format(reminder_name))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: True)
def handle_all_message(message):
    bot.send_message(message.chat.id, '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –≥–æ–≤–æ—Ä–∏—Ç–µ. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ /reminder.')



def check_date():
    now_date = datetime.datetime.now()
    users_to_delete = []
    for chat_id, value in users.items():
        user_date = value[0]
        msg = value[1]
        if now_date >= user_date:
            bot.send_message(chat_id, msg)
            users_to_delete.append(chat_id)
    for user in users_to_delete:
        del users[user]
    threading.Timer(1, check_date).start()



if __name__ == '__main__':
    users = {}
    main()
    bot.polling(none_stop=True)